/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>


/**
 * The available result codes from running [`list_quantum_processors`]
 */
enum ListQuantumProcessorsResult {
    Success = 0,
    CouldNotQueryQCS = 1,
    Unauthorized = 2,
};
typedef uint8_t ListQuantumProcessorsResult;

/**
 * Represents the information of a single available processor
 */
typedef struct QuantumProcessor {
    /**
     * Unique identifier for a Processor.
     */
    char *id;
} QuantumProcessor;

/**
 * The response from [`list_quantum_processors`], contains an array of strings.
 */
typedef struct ListQuantumProcessorResponse {
    /**
     * The result code of the function call. Anything other than [`ListQuantumProcessorsResult::Success`]
     * will result in a null `processors`.
     */
    ListQuantumProcessorsResult result;
    /**
     * Array of all available processors. This will be NULL if `result` is not Success
     */
    struct QuantumProcessor *processors;
    /**
     * The length of the array to use for iterating.
     */
    size_t len;
    /**
     * The total capacity of the array in case you'd like to modify it.
     */
    size_t cap;
} ListQuantumProcessorResponse;

/**
 * This function exists to deallocate the memory that was allocated by a call to [`list_quantum_processors`]
 *
 * # Safety
 *
 * The `response` passed in here must be a valid [`ListQuantumProcessorResponse`] as created by
 * [`list_quantum_processors`].
 */
void free_quantum_processors(struct ListQuantumProcessorResponse response);

/**
 * Return a comma-separated list of available quantum processors
 *
 * # Safety
 *
 * In order to safely operate this function:
 *
 * 1. The return value of this function __must__ be passed into [`free_quantum_processors`] in
 *     order to deallocate the memory.
 *
 */
struct ListQuantumProcessorResponse list_quantum_processors(void);
